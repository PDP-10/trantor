; -*-PALX-*-
.sbttl	Time Routines

; This module keeps track of the current time and system uptime.

; TIMUT is the two word length of time the system has run, measured in
; 60ths of a second ("uptime").

; TIMST contains the two word time the system came up, measured in
; seconds since midnight January 1, 1900 GMT ("start time").


; Timer initialization.
; Turn on line clock interrupts and set up interrupt vector.
tiinit:	clr timut+0		; set uptime to zero
	clr timut+2		; ...
	clr timsts		; clear flag saying we know the time
	mov tgmt+0,timst+0	; set time system came up to zero
	mov tgmt+2,timst+2	; (local time)
	push pc			; set clock interrupt vector PC
	add #timint-.,(sp)	; ...
	pop @#100		; ...
	mov #pr6,@#102		; set clock interrupt vector PS
.lif df  lks
	mov #100,@#lks		; turn on clock interrupts
	return


; Timer interrupt handler.  Keep system up time by incrementing counter
; for every interrupt.
timint:	inc intflg		; indicate an interrupt has occured
	add #1,timut+0		; double-word increment (ADD since INC
	adc timut+2		; doesn't set C bit)
	dec tquant		; decrement time quantum
	bgt 2$			; still positive, let the process run
	add #1,timout+0		; increment timeout count
	adc timout+2		; ...
	cmpb 2(sp),#pr4		; is this clock interrupt interrupting an
				; interrupt?
	bhis 2$			; yes, hold off on preemption
	tst safety		; preemption deferred softwarily?
	bne 2$			; yes, hold off on preemption
	add #1,preemc+0		; increment preemption count
	adc preemc+2		; ...
.lif ne  asmpre
	jmp tc			; preempt this process, its time is up
2$:	rti


timut:	.blkw 2			; uptime
timsts:	.blkw 1			; flag set when time is known
timst:	.blkw 2			; start time
tgmt:	.word 5*60.*60.,0	; difference between GMT and local time

; UPTIME routine returns the current system up-time, in 60ths of a second.

;	ARGS:				VALS:
;	(none)			SP ->	uptime hi
;					uptime lo

uptime:	push (sp),(sp)		; make room for two return vals
	mfps -(sp)		; save priority
	spl 6			; set high priority to insure time valid
	mov timut+0,6(sp)	; get system up time
	mov timut+2,4(sp)	; ...
	mtps (sp)+		; restore priority
	return


; TIME returns the current time, measured in seconds since midnight
; January 1, 1900 (GMT).

;	ARGS:				VALS:
;	(none)			SP ->	time hi
;					time lo

time:	push (sp),(sp)		; create room for two return values
	jsr r5,save6		; save regs
	call uptime		; get system up time
	pop r0,r1		; UPTIME vals: time hi, time lo
	jsr pc,ddiv60		; divide system up time by 60 to get seconds
	peof			; no preemption while reading time system up
	add timst+0,r1		; add time system came up
	adc r0			; ...
	add timst+2,r0		; ...
	peon			; allow preemption again
	mov r1,20(sp)		; return current time
	mov r0,16(sp)		; ...
	jsr r5,rest6		; restore regs
	return


; TIMSET sets the current time from two binary words on the stack.
; This is accomplished by changing the time the system came up to
; the desired time minus the system up time (which remains unchanged).

;	ARGS:				VALS:
; SP ->	time hi				(none)
;	time lo

timset:	jsr r5,save6		; save regs
	call uptime		; get 60ths system has run
	pop r0,r1		; vals: time hi, time lo
	jsr pc,ddiv60		; divide by 60 to get seconds system has run
	sub r1,20(sp)		; subtract time system has run from desired
	sbc 16(sp)		; time to get time system came up
	sub r0,16(sp)		; ...
	peof			; turn off preemption while setting time
	mov 20(sp),timst+0	; change time system came up
	mov 16(sp),timst+2	; ...
	peon			; allow preemption again
	mov #1,timsts		; set flag saying time is set
	jsr r5,rest6		; restore regs
	pop (sp),(sp)		; remove arguments from stack
	push ttych+0		; WRITEC arg: channel id
	call writec		; put message on system console
	  .string ^"It is now  "
	push ttych+0				; PTIME arg: channel id
	push #%pttime+%ptdate+%ptday+%ptzone	; PTIME arg: control bits
	call time		; PTIME args: time lo, time hi
	call ptime		; print time on system console
	push ttych+0		; WRITEC arg: channel id
	call writec		; put message on system console
	  .string ^"
"
	return

.sbttl	Time conversion

; CVBTD converts time as measured in seconds since midnight January 1, 1900
; (GMT) to year, month, day, etc. values.

;	ARGS:				VALS:
; SP ->	time hi			 SP ->	seconds
;	time lo				minutes
;					hour
;					day
;					month
;					year
;					day of week

cvbtd:	sub #12,sp		; make room for 5 more return vals
	mov 12(sp),(sp)		; ...
	jsr r5,save6		; save regs
	mov 32(sp),r1		; get time lo
	mov 30(sp),r0		; get time hi
	sub tgmt+0,r1		; convert from GMT to local time
	sbc r0			; ...
	sub tgmt+2,r0		; ...
	jsr pc,ddiv60		; divide r0,r1 by 60, quotient (in r0,r1) is
				; minutes since 1900, remainder (in r2) is
				; seconds
	mov r2,16(sp)		; return seconds
	jsr pc,ddiv60		; divide r0,r1 by 60, quotient (in r0,r1) is
				; hours since 1900, remainder (in r2) is
				; minutes
	mov r2,20(sp)		; return minutes
	jsr pc,ddiv24		; divide r0,r1 by 24, quotient (in r0,r1) is
				; days since 1900, remainder (in r2) is hours
	mov r2,22(sp)		; return hours
	mov r1,r3		; copy days since 1900
	inc r3			; fudge so January 1, 1900 comes out as Monday
	clr r2			; for DIV
	div #7,r2		; divide by 7 to get day of week
	mov r3,32(sp)		; return day of week
	cmp r1,#31.+28.		; after Febuary 28, 1900?
	if his,<		; yes
	  inc r1		; add one to days so 1900 looks like leap year
	  >
	div #365.*4+1,r0	; divide days since 1900 by the no. of days in
				; four years
	ash #2,r0		; multiply by four to get year
	add #1900.,r0		; add 1900 to year
	mov r0,30(sp)		; return year (possibly add to this later)
	cmp r1,#31.+29.		; January of February of a leap year?
	if lo,<			; yes
	  mov #1,26(sp)		; January
	  cmp r1,#31.		; right?
	  blo 1$		; yes
	  inc 26(sp)		; no, February
	  sub #31.,r1		; adjust day of month
	  br 1$
	  >
	dec r1			; forget about February 29
	clr r0			; divide by 365 to get years since leap year
	div #365.,r0		; in r0, days since beginning of year in r1
	add r0,30(sp)		; add to year
	mov pc,r0		; ptr to TIMMOT
	add #timmot-.,r0	; ...
	clr 26(sp)		; init month return value
loop <	  inc 26(sp)		; increment month return value
	  sub (r0)+,r1		; subtract no. of days in that month
	  rptl his		; gone too far?
	  >
	add -(r0),r1		; went too far, back off
1$:	inc r1			; day of month is one based, not zero based
	mov r1,24(sp)		; return day of month
	jsr r5,rest6		; restore regs
	return

; Table of days in months.
timmot:	.word 31.,28.,31.,30.,31.,30.
	.word 31.,31.,30.,31.,30.,31.

; CVDTB converts date and time values to time measured in seconds since
; midnight January 1, 1900 (GMT).

;	ARGS:				VALS:
; SP ->	seconds			 SP ->	time hi
;	minutes				time lo
;	hour
;	day
;	month
;	year
;	day of week

cvdtb:	push r0,r1,r2		; save regs
	mov 22(sp),r1		; get year
	sub #1900.,r1		; make 1900 year zero
	clr r0			; divide year by 4, quotient is leap year
	div #4,r0		; group, remainder is year within group
	mul #365.,r1		; convert year within group to days
	mov r1,r2		; save
	mov r0,r1		; convert leap year group to days
	mul #365.*4+1,r1	; ...
	mov 20(sp),r0		; get month
	asl r0			; times two for indexing
	add pc,r0		; for PICness
	add tindmt-2-.(r0),r2	; convert month to no. of days and add in
	cmp r2,#31.+28.		; past January or February of the leap year?
	if his,<
	  inc r2		; yes, add one to account for February 29
	  >
	add 16(sp),r2		; add in day of month
	dec r2			; but decrement since its one origin
	add r2,r1
	cmp r1,#31.+29.		; past January or February of 1900?
	if his,<
	  dec r1		; yes, adjust for 1900 not being a leap year
	  >
	clr r0			; clear high order for multiplying
	mov #24.,r2		; DMUL arg: multiplier
	call dmul		; convert no. of days to no. of hours
	add 14(sp),r1		; add hour of the day
	adc r0			; ...
	mov #60.,r2		; DMUL arg: multiplier
	call dmul		; convert no. of hours to no. of minutes
	add 12(sp),r1		; add minutes
	adc r0			; ...
	mov #60.,r2		; DMUL arg: multiplier
	call dmul		; multiply R0,R1 by 60 to get seconds
	add 10(sp),r1		; add seconds
	adc r0			; ...
	add tgmt+0,r1		; convert from local time to GMT
	adc r0			; ...
	add tgmt+2,r0		; ...
	mov r1,24(sp)		; return lo order time
	mov r0,22(sp)		; return hi order time
	pop r2,r1,r0		; restore regs
	mov (sp),12(sp)		; move up return r5
	add #12,sp		; remove args from stack
	return
 
; Table of days preceeding current month in current year.
tindmt:	.word 0.,31.,59.,90.,120.,151.,181.,212.,243.,273.,304.,334.

.sbttl	Time Printing

; PTIME prints the given time on the given i/o channel.

;	ARGS:				VALS:
; SP ->	time hi				(none)
;	time lo
;	control bits
;	channel id

ptime:	push r0,r1		; save regs
	push 10(sp),6+2(sp)	; CVBTD args: time lo, time hi
	call cvbtd		; convert 2-word time to more useable form
	mov 4(sp),r0  		; swap seconds and hours to get in
	mov (sp),4(sp)  	; hours, minutes, seconds order
	mov r0,(sp)		; ...
	bit #%pt24hr,12+16(sp)	; 24 hour time or normal time?
	if eq,<			; normal time
	  mov pc,r1		; ptr to "AM"
	  add #ampm-.,r1	; ...
	  cmp r0,#12.		; afternoon?
	  if his,<
	    sub #12.,r0		; yes, subtract 12 hours
	    add #3,r1		; and change ptr to "PM"
	    >
	  mov r0,(sp)		; put hours on stack
	  if eq,<
	    mov #12.,(sp)	; convert zero hours to 12
	    >
	  >
	push 14+16(sp)  	; IOAC arg: channel id
	bit #%ptsecs,12+20(sp)	; print seconds?
	if ne,<
	  call ioac  		; print time
	    .string ^"^d:^2z:^2z"
	  >
	else <
	  call ioac		; print time
	    .string ^"^d:^2z"
	  pop *			; pop off seconds from stack
	  >
	bit #%pt24hr,12+10(sp)	; 24 hour time or normal time?
	if eq,<			; normal time
	  push 14+10(sp),r1	; WRITEZ args: channel id, ptr
	  call writez		; print AM or PM
	  >
	bit #%ptzone,12+10(sp)	; print time zone?
	if ne,<
	  push 14+10(sp)	; WRITEC arg: channel id
	  call writec		; print time zone
	    .string ^" EST"
	  >
	push 14+10(sp)		; WRITEC arg: channel id
	call writec		; output two spaces
	  .string ^"  "
	bit #%ptday,12+10(sp)	; print day of week?
	if ne,<
	  mov 6(sp),r0		; get day of week
	  asl r0		; times two for indexing
	  add pc,r0		; for PICness
	  add #daynam-.,r0	; ptr to ptr to  day's name
	  push 14+10(sp)	; WRITEZ arg1: channel id
	  mov (r0),-(sp)	; WRITEZ arg2: ptr to asciz string
	  add r0,(sp)		; ...
	  call writez		; print day of the week
	  push 14+10(sp)	; WRITEC args: channel id
	  call writec		; print comma, space
	    .string ^", "
	  >
	mov 2(sp),r0  		; swap day and month to get in
	mov (sp),2(sp)  	; month, day, year order
	mov r0,(sp)		; ...
	bit #%ptslsh,12+10(sp)	; slash dates?
	if eq,<			; no, real ones
	  asl r0		; 1st times two for indexing
	  add pc,r0		; convert month no. to month name
	  add #moname-2-.,r0	; ptr to relative ptr
	  mov (r0),(sp)		; convert relative ptr to absolute one
	  add r0,(sp)		; ...
	  push 14+10(sp)	; IOAC arg: channel id
	  call ioac		; print nice date
	    .string ^"^a ^d, ^d"
	  >
	else <			; slash dates
	  sub #1900.,4(sp)	; only print last two digits of year
	  push 14+10(sp)	; IOAC arg: channel id
	  call ioac		; print slash date
	    .string ^"^d/^d/^2z"
	  >
	pop *,r1,r0,6(sp)	; restore regs, remove args from stack
	add #6,sp		; ...
	return

%pttime==1			; print time (nyi)
%ptsecs==2			; print seconds
%pt24hr==4			; use losing 24-hour time
%ptdate==10			; print date (nyi)
%ptslsh==20			; use slash date
%ptday==40			; print day of week
%ptzone==100			; print time zone

ampm:	.asciz "AM"
	.asciz "PM"
	.even

daynam:	.string ^"Sunday"
	.string ^"Monday"
	.string ^"Tuesday"
	.string ^"Wednesday"
	.string ^"Thursday"
	.string ^"Friday"
	.string ^"Saturday"

moname:	.string ^"January"
	.string ^"February"
	.string ^"March"
	.string ^"April"
	.string ^"May"
	.string ^"June"
	.string ^"July"
	.string ^"August"
	.string ^"September"
	.string ^"October"
	.string ^"November"
	.string ^"December"


; CVBTF converts a two word binary time to a file system date.

;	ARGS:				VALS:
; SP ->	time hi			 SP ->	file date
;	time lo

cvbtf:	jsr r5,save6		; save regs
	mov 16(sp),r0		; get time argument (seconds since 1900)
	mov 20(sp),r1		; ...
; Following done because GMT is not correct if only storing no. of days.
; GMT could (and should) be used if at least the no. of hours were used.
	sub tgmt+0,r1		; convert from GMT to local time
	sbc r0			; ...
	sub tgmt+2,r0		; ...
	jsr pc,ddiv60		; divide r0,r1 by 60, quotient (in r0,r1) is
				; minutes since 1900, remainder (in r2) is
				; seconds
	jsr pc,ddiv60		; divide r0,r1 by 60, quotient (in r0,r1) is
				; hours since 1900, remainder (in r2) is
				; minutes
	jsr pc,ddiv24		; divide r0,r1 by 24, quotient (in r0,r1) is
				; days since 1900, remainder (in r2) is hours
	sub #28489.,r1		; convert from days since 1900 to days since
				; 1978
	if lo,<			; earlier than 1978
	  clr r1		; use January 1, 1978
	  >
	mov r1,20(sp)		; return days since 1978 as file date
	jsr r5,rest6		; restore regs
	pop (sp)		; remove argument from stack
	return


; CVFTB converts a file system date to a two word binary time.

;	ARGS:				VALS:
; SP ->	file date		 SP ->	time hi
;					time lo

cvftb:	push (sp)		; make slot for extra return value
	jsr r5,save6		; save regs
	mov 20(sp),r1		; get file date argument
	add #28489.,r1		; convert from days since 1978 to days
				; since 1900
	clr r0			; start off with high part clear
	mov #24.*60.,r2		; DMUL arg: multiplier
	call dmul		; convert from days to minutes
	mov #60.,r2		; DMUL arg: multiplier
	call dmul		; convert from minutes to seconds
; Following done because GMT is not correct if only storing no. of days.
; GMT could (and should) be used if at least the no. of hours were used.
	add tgmt+0,r1		; convert from local time to GMT
	adc r0			; ...
	add tgmt+2,r0		; ...
	mov r0,16(sp)		; return two word binary time
	mov r1,20(sp)		; ...
	jsr r5,rest6		; restore regs
	return
